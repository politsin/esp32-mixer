#include "esp_err.h"
#include "esp_log.h"
#include <driver/i2c.h>

#define I2_TAG "I2C"
#define SCL_GPIO GPIO_NUM_16
#define SDA_GPIO GPIO_NUM_17

extern void i2cInitX();

extern bool i2cConnectX(uint8_t addr);

/*********************************************************************************
 * _delay_millisec()
 *  @brief: The delay routine
 *
 *  @param millisec delay in ms
 *
 *  @important The RTOS func TaskDelay() is not suited; its lowest delay is 10
 * milliseconds and it does not work with high accuracy for low values.
 */
extern void _delay_millisec(uint32_t millisec);
extern esp_err_t master_write_byte(uint8_t addr, uint8_t reg) ;
extern esp_err_t master_write_cmd(uint8_t addr, uint8_t reg, uint8_t command);
extern esp_err_t master_write_cmd16(uint8_t addr, uint8_t reg, uint16_t command);
extern esp_err_t master_write_register(uint8_t addr, uint16_t command);
extern uint8_t readRegister8(uint8_t addr, uint8_t reg);
extern int16_t readRegister16(uint8_t addr, uint8_t reg);
extern uint16_t readRegisterU16(uint8_t addr, uint8_t reg);
extern uint32_t readRegister24(uint8_t addr, uint8_t reg);
/*********************************************************************************
 * _check_crc()
 *
 * @return ESP_OK ESP_ERR_INVALID_CRC
 *
 * @doc (rx_buf+3, rx_buf[5]);
 *
 * @datasheet 4.12 Checksum Calculation
 *    The 8-bit CRC checksum transmitted after each data word is generated by a
 *    CRC algorithm. Its properties are displayed in Table 20. The CRC covers the
 *    contents of the two previously transmitted data bytes. To calculate the
 *    checksum only these two previously transmitted data bytes are used. Property
 *    Value
 *      -------         --------
 *      Name            CRC-8
 *      Width           8 bit
 *      Protected data  read and/or write data
 *      Polynomial      0x31 (x8 + x5 + x4 + 1)
 *      Initialization  0xFF
 *      Reflect input   false
 *      Reflect output  false
 *      Final XOR       0x00
 *
 * Polynomial for CRC is 0x31 and not 0x131 (an 8-bit checksum can't use the 9th
 *bit in the polynomial)
 *
 *  Example CRC (0xBEEF) = 0x92
 *
 *********************************************************************************/
esp_err_t _compute_crc(const uint8_t *param_data, int param_len,
                       uint8_t *param_computed_value);
esp_err_t _check_crc(const uint8_t *param_data, int param_len,
                     uint8_t param_expected_value);
